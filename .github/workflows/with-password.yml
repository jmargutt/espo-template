name: Continuous Integration and Delivery

on: workflow_dispatch

jobs:
  deploy:
    name: Push changes to server
    runs-on: ubuntu-latest

    steps:

      - name: Set container backup names
        id: backup_names
        run: |
          echo "ESPOCRM_CONTAINER_BK=$(date "+%Y-%m-%d_%H-%M-%S")_espocrm" >> "$GITHUB_OUTPUT"
          echo "MYSQL_CONTAINER_BK=$(date "+%Y-%m-%d_%H-%M-%S")_espocrm-mysql" >> "$GITHUB_OUTPUT"

      - name: Connect to server and backup the containers
        id: backup
        run: |
          apt-get install sshpass
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP_ADDRESS }} << 'ENDSSH'
            docker commit -p espocrm ${{ steps.backup_names.outputs.ESPOCRM_CONTAINER_BK }}
            docker commit -p espocrm-mysql ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }}
            docker exec espocrm-mysql mysqldump --all-databases -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} --skip-comments > ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }}.sql
          ENDSSH

      - name: Connect to server, pull in code changes, migrate database schema, set file permissions
        id: docker_container_actions
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP_ADDRESS }} << 'ENDSSH'
            docker exec espocrm git checkout main
            docker exec espocrm git pull origin main
            docker exec espocrm php rebuild.php
            docker exec espocrm /bin/bash -c 'git ls-files | xargs chown www-data'
            docker exec espocrm /bin/bash -c 'git ls-files | xargs chgrp www-data'
          ENDSSH

      - name: If failure, restore the backup containers and copy DB dump
        id: restore_backup
        if: (steps.backup.outcome == 'success') && (steps.docker_container_actions.outcome == 'failure')
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP_ADDRESS }} << 'ENDSSH'
            docker stop espocrm
            docker stop espocrm-mysql
            docker rename espocrm-mysql ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }}
            docker rename espocrm ${{ steps.backup_names.outputs.ESPOCRM_CONTAINER_BK }}
            docker run --name espocrm-mysql -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -d ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }} --default-authentication-plugin=caching_sha2_password
            docker run --name espocrm -e ESPOCRM_SITE_URL=http://${{ secrets.SERVER_IP_ADDRESS }}:${{ secrets.PORT }} -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -p ${{ secrets.PORT }}:80 --link espocrm-mysql:espocrm-mysql -d ${{ steps.backup_names.outputs.ESPOCRM_CONTAINER_BK }}
            sleep 60
            docker exec -i espocrm-mysql sh -c 'exec  mysql -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }}' < ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }}.sql
            rm ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }}.sql
          ENDSSH

      - name: Delete the backups if they are not being used
        if: (steps.backup.outcome == 'success') && (steps.docker_container_actions.outcome == 'success') && (steps.restore_backup.outcome == 'skipped')
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP_ADDRESS }} << 'ENDSSH'
            docker rmi ${{ steps.backup_names.outputs.ESPOCRM_CONTAINER_BK }}
            docker rmi ${{ steps.backup_names.outputs.MYSQL_CONTAINER_BK }}
          ENDSSH

      - name: Cleanup
        run: rm -rf ~/.ssh